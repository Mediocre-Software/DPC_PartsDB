#------------------------------------------------------------------------
# Source File Information (DO NOT MODIFY)
# Source ID: 4f19bbf8-6530-43e8-a9da-96cf8605d09c
# Source File: C:\Users\Nic\Desktop\UpdateUser.psf
#------------------------------------------------------------------------

<#
    .NOTES
    --------------------------------------------------------------------------------
     Code generated by:  SAPIEN Technologies, Inc., PowerShell Studio 2020 v5.7.172
     Generated on:       11/02/2021 5:35 AM
     Generated by:       Nic
     Organization:       DiscountPC
    --------------------------------------------------------------------------------
    .DESCRIPTION
        GUI script generated by PowerShell Studio 2020
#>

#====================================================#
#############    Hide Console Window     #############
#====================================================#
Import-Module PowerShellGet
Import-Module SecureBoot
Add-Type -Name Window -Namespace Console -MemberDefinition '
[DllImport("Kernel32.dll")]
public static extern IntPtr GetConsoleWindow();
[DllImport("user32.dll")]
public static extern bool ShowWindow(IntPtr hWnd, Int32 nCmdShow);'
$consolePtr = [Console.Window]::GetConsoleWindow()
[Console.Window]::ShowWindow($consolePtr, 0)


function Show-UpdateUser_psf {
	
	#====================================================#
	#############    Imported Assemblies    ##############
	#====================================================#
	[void][reflection.assembly]::Load('System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	[void][reflection.assembly]::Load('System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Data, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('PresentationFramework, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35')
	[void][reflection.assembly]::Load('System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	
	
	#====================================================#
	##############  Create Form Objects    ###############
	#====================================================#
	[System.Windows.Forms.Application]::EnableVisualStyles()
	$form2 = New-Object 'System.Windows.Forms.Form'
	$panel2 = New-Object 'System.Windows.Forms.Panel'
	$textbox2 = New-Object 'System.Windows.Forms.TextBox'
	$panel1 = New-Object 'System.Windows.Forms.Panel'
	$cbPolicy = New-Object 'System.Windows.Forms.CheckBox'
	$cbPsVersion = New-Object 'System.Windows.Forms.CheckBox'
	$cbGoogle = New-Object 'System.Windows.Forms.CheckBox'
	$cbGitHub = New-Object 'System.Windows.Forms.CheckBox'
	$picturebox1 = New-Object 'System.Windows.Forms.PictureBox'
	$progressbar1 = New-Object 'System.Windows.Forms.ProgressBar'
	$cbExcel = New-Object 'System.Windows.Forms.CheckBox'
	$InitialFormWindowState = New-Object 'System.Windows.Forms.FormWindowState'

	
	#====================================================#
	#############   SplashScreen Function   ##############
	#====================================================#
	
	#region Splash Screen Helper Function
	function Show-SplashScreen
	{
		<#
		.SYNOPSIS
			Displays a splash screen using the specified image.
		
		.PARAMETER Image
			Mandatory Image object that is displayed in the splash screen.
		
		.PARAMETER Title
			(Optional) Sets a title for the splash screen window. 
		
		.PARAMETER Timeout
			The amount of seconds before the splash screen is closed.
			Set to 0 to leave the splash screen open indefinitely.
			Default: 2
		
		.PARAMETER ImageLocation
			The file path or url to the image.
	
		.PARAMETER PassThru
			Returns the splash screen form control. Use to manually close the form.
		
		.PARAMETER Modal
			The splash screen will hold up the pipeline until it closes.
	
		.EXAMPLE
			PS C:\> Show-SplashScreen -Image $Image -Title 'Loading...' -Timeout 3
	
		.EXAMPLE
			PS C:\> Show-SplashScreen -ImageLocation 'C:\Image\MyImage.png' -Title 'Loading...' -Timeout 3
	
		.EXAMPLE
			PS C:\> $splashScreen = Show-SplashScreen -Image $Image -Title 'Loading...' -PassThru
					#close the splash screen
					$splashScreen.Close()
		.OUTPUTS
			System.Windows.Forms.Form
		
		.NOTES
			Created by SAPIEN Technologies, Inc.
	
			The size of the splash screen is dependent on the image.
			The required assemblies to use this function outside of a WinForms script:
			Add-Type -AssemblyName System.Windows.Forms
			Add-Type -AssemblyName System.Drawing
	#>
		[OutputType([System.Windows.Forms.Form])]
		param
		(
			[Parameter(ParameterSetName = 'Image',
					   Mandatory = $true,
					   Position = 1)]
			[ValidateNotNull()]
			[System.Drawing.Image]$Image,
			[Parameter(Mandatory = $false)]
			[string]$Title,
			[int]$Timeout = 2,
			[Parameter(ParameterSetName = 'ImageLocation',
					   Mandatory = $true,
					   Position = 1)]
			[ValidateNotNullOrEmpty()]
			[string]$ImageLocation,
			[switch]$PassThru,
			[switch]$Modal
		)
		
		#Create a splash screen form to display the image.
		$splashForm = New-Object System.Windows.Forms.Form
		
		#Create a picture box for the image
		$pict = New-Object System.Windows.Forms.PictureBox
		
		if ($Image)
		{
			$pict.Image = $Image;
		}
		else
		{
			$pict.Load($ImageLocation)
		}
		
		$pict.AutoSize = $true
		$pict.Dock = 'Fill'
		$splashForm.Controls.Add($pict)
		
		#Display a title if defined.
		if ($Title)
		{
			$splashForm.Text = $Title
			$splashForm.FormBorderStyle = 'FixedDialog'
		}
		else
		{
			$splashForm.FormBorderStyle = 'None'
		}
		
		#Set a timer
		if ($Timeout -gt 0)
		{
			$timer = New-Object System.Windows.Forms.Timer
			$timer.Interval = $Timeout * 1000
			$timer.Tag = $splashForm
			$timer.add_Tick({
					$this.Tag.Close();
					$this.Stop()
				})
			$timer.Start()
		}
		
		#Show the form
		$splashForm.AutoSize = $true
		$splashForm.AutoSizeMode = 'GrowAndShrink'
		$splashForm.ControlBox = $false
		$splashForm.StartPosition = 'CenterScreen'
		$splashForm.TopMost = $true
		
		if ($Modal) { $splashForm.ShowDialog() }
		else { $splashForm.Show() }
		
		if ($PassThru)
		{
			return $splashForm
		}
	}
	
	$progressbar1_Click={
		
	}
	
	$textbox1_TextChanged={
		
	}
	
	$textbox2_TextChanged={
		
	}
	
	$cbPsVersion_CheckedChanged={
		
	}
	
	$cbGitHub_CheckedChanged={
		
	}
	
	$cbPolicy_CheckedChanged={
		
	}
	
	$cbGoogle_CheckedChanged={
		
	}
	
	$cbExcel_CheckedChanged={
		
	}
		
		#====================================================#
		#############    Form Loading Events    ##############
		#====================================================#
		
		$form1_Load = {
		
			$firstRun = Test-Path -Path "$($env:APPDATA)/dpc_partsdb/DPC_PartsDB.exe"
			If ($firstRun -eq $false) {
				Invoke-
			# Show the SplashScreen
		    $splashScreen = Show-SplashScreen -ImageLocation "$($env:APPDATA)/DPC_PartsDB/DPCLogo.png" -Title 'Downloading Missing Dependencies...' -PassThru
				Show-SplashScreen -Image $logoPath -Title 'Downloading Missing Dependencies...' -TimeOut 10
				
				
			# Check if PowerShell is up-to-date
			$g = (Get-Host).Version
			if ($g.Major -lt 7) {
				$psCheck = [System.Windows.Forms.MessageBox]::Show('The latest version of PowerShell is required before accessing the Parts Database. `
Press OK to download the latest version, or Cancel to exit.', 'Update Required', [System.Windows.Forms.MessageBoxButtons]::OKCancel)
				If ($psCheck -eq [System.Windows.Forms.DialogResult]::OK) {
					[System.Windows.Forms.MessageBox]::Show('Follow the prompts after the download has completed to finish installing.', 'Update Required', [System.Windows.Forms.MessageBoxButtons]::OK)
					Write-Host "Set-ExecutionPolicy -ExecutionPolicy Unrestricted -Scope CurrentUser -Force"
					Write-Host 'iex "& {$(Invoke-RestMethod https://aka.ms/install-powershell.ps1)	} -UseMSI"'
				}
				Else {
					$form1.Close
				}
			}
		
			# Assign Variables
			$icoPath = "$($env:APPDATA)/DPC_PartsDB/DataTable.ico"
			$logoPath = "$($env:APPDATA)/DPC_PartsDB/DPCLogo.png"
			$dpcPath = Join-Path "$($env:APPDATA)" "DPC_PartsDB"
			$changeDir = Join-Path "$($env:APPDATA)" "DPC_PartsDB/Change_Log"
			$icoExists = Test-Path $icoPath
			$logoExists = Test-Path $logoPath
			$dpcPathExists = Test-Path $dpcPath
			$changeExists = Test-Path $changeDir
			
			# Check File System For Main Directory	
			If ($dpcPathExists -eq $false)
			{
				New-Item -Path "$($env:APPDATA)" -Name "DPC_PartsDB" -ItemType "Directory"
			}
			
			# Check for Required Modules
			$modCheck1 = (Get-Module -ListAvailable -Name 'PowerShellForGitHub')
			If ($null -eq $modCheck1)
			{
				[System.Windows.Forms.MessageBox]::Show("Installing (1 of 1) Missing Dependencies.`
This Could Take A Few Moments To Complete...", "Missing Program Dependencies", [System.Windows.Forms.MessageBoxButtons]::OK)
				Install-Module  'PowerShellForGitHub' -Scope CurrentUser -AllowClobber -Force | Out-Null
			}
			
			# Import Modules		
			Import-Module PowerShellForGitHub | Out-Null
			
			# Download Database CSV File...	
			Get-GitHubContent -OwnerName Mediocre-Software -RepositoryName DPC_PartsDB -Path PartsDB.csv -AccessToken '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' -MediaType Raw -ResultAsString | Out-File -Encoding UTF8 -FilePath "$($env:APPDATA)/DPC_PartsDB/Parts.csv" -Force
			
			# Decode Csv from Unicode-16 -> UTF-8
			Get-Content -Encoding Unicode -Path "$($env:APPDATA)/DPC_PartsDB/Parts.csv" | Set-Content -Encoding UTF8 -Path "$($env:APPDATA)/DPC_PartsDB/PartsDB.csv" -Force
			
			# Check for Remaining Dependency Files 
			If ($changeExists -eq $false)
			{
				New-Item -Path "$($env:APPDATA)/DPC_PartsDB" -Name "Change_Log" -ItemType "Directory"
			}
			If ($logoExists -ne $True)
			{
				Invoke-WebRequest -Uri https://raw.githubusercontent.com/Mediocre-Software/DPC_PartsDB/main/DPCLogo.png -OutFile "$($env:APPDATA)/DPC_PartsDB/DPCLogo.png"
			}
			If ($icoExists -ne $True)
			{
				Invoke-WebRequest -Uri https://raw.githubusercontent.com/Mediocre-Software/DPC_PartsDB/main/DataTable.ico -OutFile "$($env:APPDATA)/DPC_PartsDB/DataTable.ico"
			}
			
			# Close the splash screen
		    #$splashScreen.Close()
			
			# Load table into DGV
			$rows = Import-Csv -Encoding UTF8 -Path "$($env:APPDATA)/DPC_PartsDB/PartsDB.csv"
			$table = ConvertTo-DataTable -InputObject $rows
			$table.AcceptChanges()
			Update-DataGridView -DataGridView $datagridview1 -Item $table
			
			$datagridview1.Columns[0].FillWeight = '8'  # DP/N
			$datagridview1.Columns[1].FillWeight = '55' # DESCRIPTION
			$datagridview1.Columns[2].FillWeight = '15' # LOCATION
			$datagridview1.Columns[3].FillWeight = '6'  # QTY
			$datagridview1.Columns[4].FillWeight = '8'  # $VALUE
			$datagridview1.Columns[5].FillWeight = '8'  # $TOTAL
			
		}
	$Form_StateCorrection_Load=
	{
		#Correct the initial state of the form to prevent the .Net maximized form issue
		$form2.WindowState = $InitialFormWindowState
	}
	
	$Form_Cleanup_FormClosed=
	{
		#Remove all event handlers from the controls
		try
		{
			$textbox2.remove_TextChanged($textbox2_TextChanged)
			$form2.remove_Load($formSplashScreen_Load)
			$form2.remove_Load($Form_StateCorrection_Load)
			$form2.remove_FormClosed($Form_Cleanup_FormClosed)
		}
		catch { Out-Null <# Prevent PSScriptAnalyzer warning #> }
	}
	#endregion Generated Events

	#----------------------------------------------
	#region Generated Form Code
	#----------------------------------------------
	$form2.SuspendLayout()
	$panel1.SuspendLayout()
	$panel2.SuspendLayout()
	#
	# formDPCUpdateWizard
	#
	$form2.Controls.Add($panel2)
	$form2.Controls.Add($panel1)
	$form2.AutoScaleDimensions = '9, 19'
	$form2.AutoScaleMode = 'Font'
	$form2.BackColor = 'ControlLight'
	$form2.ClientSize = '423, 228'
	$form2.Font = 'Consolas, 9pt'
	$form2.FormBorderStyle = 'FixedToolWindow'
	$form2.Margin = '3, 3, 3, 3'
	$form2.MaximizeBox = $False
	$form2.Name = 'formDPCUpdateWizard'
	$form2.SizeGripStyle = 'Hide'
	$form2.StartPosition = 'CenterScreen'
	$form2.Text = 'DPC Update Wizard'
	$form2.TopMost = $True
	$form2.add_Load($formSplashScreen_Load)
	#
	# panel2
	#
	$panel2.Controls.Add($textbox2)
	$panel2.BorderStyle = 'FixedSingle'
	$panel2.Location = '9, 5'
	$panel2.Margin = '4, 4, 4, 4'
	$panel2.Name = 'panel2'
	$panel2.Size = '403, 52'
	$panel2.TabIndex = 7
	#
	# textbox2
	#
	$textbox2.BackColor = 'ControlLight'
	$textbox2.BorderStyle = 'None'
	$textbox2.Cursor = 'Default'
	$textbox2.Font = 'Lucida Console, 8.064pt'
	$textbox2.Location = '13, 12'
	$textbox2.Margin = '4, 4, 4, 4'
	$textbox2.Multiline = $True
	$textbox2.Name = 'textbox2'
	$textbox2.ReadOnly = $True
	$textbox2.ShortcutsEnabled = $False
	$textbox2.Size = '377, 28'
	$textbox2.TabIndex = 6
	$textbox2.Text = 'Installing and Updating the required system files and modules. This may take a moment...'
	$textbox2.TextAlign = 'Center'
	$textbox2.add_TextChanged($textbox2_TextChanged)
	#
	# panel1
	#
	$panel1.Controls.Add($cbPolicy)
	$panel1.Controls.Add($cbPsVersion)
	$panel1.Controls.Add($cbGoogle)
	$panel1.Controls.Add($cbGitHub)
	$panel1.Controls.Add($picturebox1)
	$panel1.Controls.Add($progressbar1)
	$panel1.Controls.Add($cbExcel)
	$panel1.BorderStyle = 'Fixed3D'
	$panel1.Location = '9, 66'
	$panel1.Margin = '4, 4, 4, 4'
	$panel1.Name = 'panel1'
	$panel1.Size = '405, 154'
	$panel1.TabIndex = 6
	#
	# checkboxPowerShellSetExecuti
	#
	$cbPolicy.AutoSize = $True
	$cbPolicy.FlatAppearance.CheckedBackColor = 'DodgerBlue'
	$cbPolicy.FlatStyle = 'System'
	$cbPolicy.Font = 'Lucida Console, 6pt'
	$cbPolicy.Location = '11, 81'
	$cbPolicy.Margin = '4, 4, 4, 4'
	$cbPolicy.Name = 'checkboxPowerShellSetExecuti'
	$cbPolicy.Size = '254, 16'
	$cbPolicy.TabIndex = 28
	$cbPolicy.Text = 'PowerShell - Set-ExecutionPolicy'
	$cbPolicy.UseCompatibleTextRendering = $True
	$cbPolicy.UseVisualStyleBackColor = $True
	#
	# checkboxPowerShellVersion7Or
	#
	$cbPsVersion.AutoCheck = $False
	$cbPsVersion.AutoSize = $True
	$cbPsVersion.FlatAppearance.CheckedBackColor = 'DodgerBlue'
	$cbPsVersion.FlatStyle = 'System'
	$cbPsVersion.Font = 'Lucida Console, 6pt'
	$cbPsVersion.ImageAlign = 'TopRight'
	$cbPsVersion.Location = '11, 104'
	$cbPsVersion.Margin = '4, 4, 4, 4'
	$cbPsVersion.Name = 'checkboxPowerShellVersion7Or'
	$cbPsVersion.Size = '247, 16'
	$cbPsVersion.TabIndex = 27
	$cbPsVersion.Text = 'PowerShell Version 7 - or Later'
	$cbPsVersion.UseCompatibleTextRendering = $True
	$cbPsVersion.UseVisualStyleBackColor = $True
	#
	# checkboxGoogleRESTAPIModule
	#
	$cbGoogle.AutoSize = $True
	$cbGoogle.FlatAppearance.CheckedBackColor = 'DodgerBlue'
	$cbGoogle.FlatStyle = 'System'
	$cbGoogle.Font = 'Lucida Console, 6pt'
	$cbGoogle.Location = '11, 13'
	$cbGoogle.Margin = '4, 4, 4, 4'
	$cbGoogle.Name = 'checkboxGoogleRESTAPIModule'
	$cbGoogle.Size = '184, 16'
	$cbGoogle.TabIndex = 25
	$cbGoogle.Text = 'Google REST API Module'
	$cbGoogle.UseCompatibleTextRendering = $True
	$cbGoogle.UseVisualStyleBackColor = $True
	#
	# checkboxGitHubRESTAPIModule
	#
	$cbGitHub.AutoSize = $True
	$cbGitHub.FlatAppearance.CheckedBackColor = 'DodgerBlue'
	$cbGitHub.FlatStyle = 'System'
	$cbGitHub.Font = 'Lucida Console, 6pt'
	$cbGitHub.Location = '11, 35'
	$cbGitHub.Margin = '4, 4, 4, 4'
	$cbGitHub.Name = 'checkboxGitHubRESTAPIModule'
	$cbGitHub.Size = '184, 16'
	$cbGitHub.TabIndex = 24
	$cbGitHub.Text = 'GitHub REST API Module'
	$cbGitHub.UseCompatibleTextRendering = $True
	$cbGitHub.UseVisualStyleBackColor = $True
	#
	# pictureboxSplashScreenHidden
	#
	#region Binary Data
	$picturebox1.Image = [System.Convert]::FromBase64String('
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')
	#endregion
	$picturebox1.Location = '-7, -42'
	$picturebox1.Margin = '4, 4, 4, 4'
	$picturebox1.Name = 'pictureboxSplashScreenHidden'
	$picturebox1.Size = '10, 25'
	$picturebox1.TabIndex = 23
	$picturebox1.TabStop = $False
	$picturebox1.Visible = $False
	#
	# progressbar1
	#
	$progressbar1.Dock = 'Bottom'
	$progressbar1.Location = '0, 130'
	$progressbar1.Margin = '4, 4, 4, 4'
	$progressbar1.Name = 'progressbar1'
	$progressbar1.Size = '401, 20'
	$progressbar1.TabIndex = 29
	#
	# checkboxMicrosoftExcelNETPac
	#
	$cbExcel.AutoSize = $True
	$cbExcel.FlatAppearance.CheckedBackColor = 'DodgerBlue'
	$cbExcel.FlatStyle = 'System'
	$cbExcel.Font = 'Lucida Console, 6pt'
	$cbExcel.Location = '11, 58'
	$cbExcel.Margin = '4, 4, 4, 4'
	$cbExcel.Name = 'checkboxMicrosoftExcelNETPac'
	$cbExcel.Size = '219, 16'
	$cbExcel.TabIndex = 26
	$cbExcel.Text = 'MicrosoftExcel .NET Package'
	$cbExcel.UseCompatibleTextRendering = $True
	$cbExcel.UseVisualStyleBackColor = $True
	$panel2.ResumeLayout()
	$panel1.ResumeLayout()
	$form2.ResumeLayout()
	#endregion Generated Form Code

	#----------------------------------------------

	#Save the initial state of the form
	$InitialFormWindowState = $form2.WindowState
	#Init the OnLoad event to correct the initial state of the form
	$form2.add_Load($Form_StateCorrection_Load)
	#Clean up the control events
	$form2.add_FormClosed($Form_Cleanup_FormClosed)
	#Show the Form
	return $form2.ShowDialog()

} #End Function

#Call the form
Show-UpdateUser_psf | Out-Null
